{
  "name": "SeriesIDParser",
  "tagline": "Parses series or movie strings to a object to handle it with applications.",
  "body": "![Project icon](https://raw.githubusercontent.com/stefmde/SeriesIDParser/master/Stuff/LibraryIcon/gray/icon_gray_256px.png)\r\n# SeriesIDParser Page\r\nThis page should give you a short overview in how to use this project\r\n\r\n***\r\n\r\n# Description\r\n## What you should know before you start\r\n1. If you dont pass a ParserSettings object to the ctor of SeriesID it will use the default settings\r\n1. You can create a ParserSettings object with empty lists with the empty ctor\r\n1. You can create a ParserSettings object with default values in the lists with a `true` in the ctor\r\n1. Before you use the ParserResult object you should check for a `NULL` in the `Exception` property and a `OKSuccess` in the `State` Property\r\n1. If it is possible, properties are always `String.Empty` is they don't have a value. Otherweise they are `NULL`. Check the property comments to see it exactly.\r\n1. Some properties are only available with series and some only with movies\r\n1. Computed properties are automatically cached if the are queried the first time\r\n1. Properties are only filled if the are found in the input string\r\n1. The ParserSettings provides methodes to serialize the object to a file or deserialize them from a file\r\n\r\n## Result Object\r\n\r\nParserResult.* | Type | Available Version | Comment\r\n------------ | ------------- | ------------- | -------------\r\nOriginalString | string | 3.0 | Contains the input string without modifications\r\nParsedString | string | 3.0 | Similar to the input string but according to guideline (ParserSettings). Can be used to rename files\r\nTitle | string | 2.0 | Contains the plain title\r\nEpisodeTitle | string | 1.0 | Contains the episode/subtitle if available\r\nFullTitle | string | 1.0 | Contains the title + IDString + EpisodeTitle\r\nIsSeries | bool | 2.0 | Is `True` if the input string is recognized as series\r\nIsMultiEpisode | bool | 8.0 | Is `True` if the input string contains something like that `S01E01E02`\r\nSeason | int | 1.0 | -\r\nEpisodes | int list | 6.1 | Contains the Episode ID's if available. Could be more than one, depends on `IsMultiEpisode`\r\nIDString | string | 1.0 | Contains the Season ID and the Episode ID's combined as string\r\nException | Exception | 1.0 | Contains the Exception if it is occoured or NULL if not \r\nResolutions | enum list Resolutions | 6.0 | One string can contain more than one Resolution\r\nYear | int | 2.0 | -\r\nFileExtension | string | 3.0 | -\r\nRemovedTokens | string list | 3.0 | Contains the tokens who are removed from the string and are not contained in the output\r\nState | enum State | 1.0 | The object state. Should be checked before using the result\r\nDetectedOldSpacingChar | char | 6.0 | -\r\nProcessingDuration | TimeSpan | 6.0 | -\r\nReleaseGroup | string | 6.1 | -\r\nAudioCodec | string | 6.1 | -\r\nVideoCodec | string | 6.1 | -\r\nFileInfo| FileInfo | 8.0 | Is contained if the extension method with the FileInfo is used\r\nParserSettingsUsed | ParserSettings | 8.0 | Contains the given parser settings who are used to generate the result object\r\n\r\n\r\n## Sample Result Series\r\n\r\nSample Input: `Knight.Rider.S01E07.Die.grosse.Duerre.1982.German.DVDRip.XviD-c0nFuSed.mkv`\r\n\r\nParserResult.* | Sample \r\n------------ | ------------- \r\nOriginalString | Knight.Rider.S01E07.Die.grosse.Duerre.1982.German.DVDRip.XviD-c0nFuSed.mkv\r\nParsedString | Knight.Rider.S01E07.Die.grosse.Duerre.1982.SD.German.XviD.mkv\r\nTitle | Knight.Rider \r\nEpisodeTitle | Die.grosse.Duerre \r\nFullTitle | Knight.Rider.S01E07.Die.grosse.Duerre \r\nIsSeries | True \r\nIsMultiEpisode | False \r\nSeason | 1 \r\nEpisodes | 7 \r\nIDString | S01E07 \r\nException | NULL\r\nResolutions | SD_Any \r\nYear | 1982 \r\nFileExtension | .mkv \r\nRemovedTokens | German, XviD \r\nState | OkSuccess\r\nDetectedOldSpacingChar | . \r\nProcessingDuration | 0,5018 ms \r\nReleaseGroup | c0nFuSed \r\nAudioCodec | - \r\nVideoCodec | XviD \r\nFileInfo| - \r\nParserSettingsUsed | ParserSettings\r\n\r\n\r\n## Sample Result Movie\r\nSample Input: `Manhattan.Project.Der.atomare.Alptraum.1986.German.DL.1080p.HDTV.x264.mkv`\r\n\r\nParserResult.* | Sample \r\n------------ | ------------- \r\nOriginalString | Manhattan.Project.Der.atomare.Alptraum.1986.German.DL.1080p.HDTV.x264.mkv\r\nParsedString | Manhattan.Project.Der.atomare.Alptraum.1986.720p.German.x264.mkv\r\nTitle | Manhattan.Project.Der.atomare.Alptraum\r\nEpisodeTitle | -\r\nFullTitle | Manhattan.Project.Der.atomare.Alptraum\r\nIsSeries | False\r\nIsMultiEpisode | False\r\nSeason | -1 \r\nEpisodes | - \r\nIDString | -\r\nException | NULL\r\nResolutions | FullHD_1080p, HD_720p \r\nYear | 1986 \r\nFileExtension | .mkv \r\nRemovedTokens | German, x264 \r\nState | OkSuccess \r\nDetectedOldSpacingChar | . \r\nProcessingDuration | 0,5282 ms \r\nReleaseGroup | c0nFuSed \r\nAudioCodec | - \r\nVideoCodec | x264 \r\nFileInfo| - \r\nParserSettingsUsed | ParserSettings\r\n\r\n***\r\n\r\n# Code Samples\r\n## The easy way\r\nHere you dont need some configuration or anything like that. If no settings is passed to it, it will use the default settings.\r\n```csharp\r\n// The string source who should be parsed\r\nstring parseMe = \"Knight.Rider.S01E07.Die.grosse.Duerre.1982.German.DVDRip.XviD.mkv\";\r\n\r\n// Creating the parser object with default settings(empty ctor)\r\nSeriesID sid = new SeriesID();\r\n\r\n// Getting the result\r\nParserResult parserResult = sid.Parse(parseMe);\r\n```\r\nNow you can access all properties in the `ParserResult` object\r\n\r\n\r\n## Custom ParserSettings\r\nIf you want to change how the parser handles something, you can edit the parser settings and pass it to the ctor\r\n```csharp\r\n// The string source who should be parsed\r\nstring parseMe = \"Knight.Rider.S01E07.Die.grosse.Duerre.1982.German.DVDRip.XviD.mkv\";\r\n\r\n// Generate the ParserSettings object\r\nParserSettings ps = new ParserSettings();\r\n\r\n// Modify a settings property\r\nps.NewSpacingChar = '-';\r\n\r\n// Creating the parser object with custom settings\r\nSeriesID sid = new SeriesID(ps);\r\n\r\n// Getting the result\r\nParserResult parserResult = sid.Parse(parseMe);\r\n```\r\nNow you can access all properties in the `ParserResult` object\r\n\r\n## Extension Methodes\r\n### Single File\r\nThere are extension methodes for the following types available\r\n* String -> String.ParseSeriesID\r\n* FileInfo -> FileInfo.ParseSeriesID\r\nThose extensions can be used for a single file and return a ParserResult object\r\n\r\n#### Examples\r\n```csharp\r\n// The string source who should be parsed\r\nstring parseMe = \"Knight.Rider.S01E07.Die.grosse.Duerre.1982.German.DVDRip.XviD.mkv\";\r\n\r\n// Parse the string\r\nParserResult result = parseMe.ParseSeriesID();\r\n```\r\n\r\n### Path\r\nThere are extension methodes for the following types available\r\n* String -> String.ParseSeriesIDPath\r\n* DirectoryInfo -> DirectoryInfo.ParseSeriesIDPath\r\nThose extensions can be used for a path and return a IEnumerable<ParserResult> object-list\r\n\r\n#### Examples\r\n```csharp\r\n// The string source who should be parsed\r\nstring parseDir = @\"C:\\MyMovieFiles\";\r\n\r\n// Parse the string\r\nIEnumerable<ParserResult> result = parseDir.ParseSeriesIDPath();\r\n```",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}